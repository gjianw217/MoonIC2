/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.mooncell.panel.xml -i qpaneldbus.h -c QPanelInterface -p qpanelinterface
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QPANELINTERFACE_H_1419582215
#define QPANELINTERFACE_H_1419582215

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "qpaneldbus.h"

/*
 * Proxy class for interface com.mooncell.panel.interface
 */
class QPanelInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.mooncell.panel.interface"; }

public:
    QPanelInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~QPanelInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> setBz(uchar on1off0, uchar hz)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(on1off0) << QVariant::fromValue(hz);
        return asyncCallWithArgumentList(QLatin1String("setBz"), argumentList);
    }

    inline QDBusPendingReply<bool> setLcd(uchar x, uchar y, const QByteArray &data)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(x) << QVariant::fromValue(y) << QVariant::fromValue(data);
        return asyncCallWithArgumentList(QLatin1String("setLcd"), argumentList);
    }

    inline QDBusPendingReply<bool> setLcdClear()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("setLcdClear"), argumentList);
    }

    inline QDBusPendingReply<bool> setLcdClearLine(uchar y)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(y);
        return asyncCallWithArgumentList(QLatin1String("setLcdClearLine"), argumentList);
    }

    inline QDBusPendingReply<bool> setLcdFull(uchar data)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(data);
        return asyncCallWithArgumentList(QLatin1String("setLcdFull"), argumentList);
    }

    inline QDBusPendingReply<bool> setLcdFullLine(uchar y, uchar data)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(y) << QVariant::fromValue(data);
        return asyncCallWithArgumentList(QLatin1String("setLcdFullLine"), argumentList);
    }

    inline QDBusPendingReply<bool> setLcdLine(uchar y, const QByteArray &data)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(y) << QVariant::fromValue(data);
        return asyncCallWithArgumentList(QLatin1String("setLcdLine"), argumentList);
    }

    inline QDBusPendingReply<bool> setLcdPos(uchar on1off0, uchar pos)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(on1off0) << QVariant::fromValue(pos);
        return asyncCallWithArgumentList(QLatin1String("setLcdPos"), argumentList);
    }

    inline QDBusPendingReply<bool> setLed(uchar on1off0, uchar index)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(on1off0) << QVariant::fromValue(index);
        return asyncCallWithArgumentList(QLatin1String("setLed"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace mooncell {
    namespace panel {
      typedef ::QPanelInterface interface;
    }
  }
}
#endif
